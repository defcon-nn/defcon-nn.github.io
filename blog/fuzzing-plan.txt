В нем предлагается попробовать следующие инструменты:
 
- black-box мутирующий фаззер radamsa
- grey-box мутирущий фаззер afl (http://lcamtuf.coredump.cx/afl/)
- libfuzzer из llvm (llvm.org/docs/LibFuzzer.html)
- символьная виртуальная машина KLEE (https://klee.github.io/)
- конкольный анализатор angr.io (http://angr.io/)
- гибридный фаззер QSym (https://www.usenix.org/conference/usenixsecurity18/presentation/yun)
Для получения крэшей в случае ошибок работы с памятью необходимо использовать инструменты типа ASan (address sanitizer из llvm).

 
1. Фаззинг структурированного полубинарного сетевого протокола INHAT (chatserv)
Обнаружение нескольких внесенных тестовых уязвимостей (и, возможно, уже существующих уязвимостей).

Создание кастомного мутатора для INHAT для libFuzz
- Одиночные пакеты
- Цепочки пакетов с плеером

Создание фильтра для фаззинга с afl

Известные попутные задачи:
p1. Упрощение интеграции afl
Сейчас требуется заметно модифицировать код сервера...

p2. Модификация afl для постпроцессинга его выхода?

p3. Добавление ssl-обертки над INHAT, и методы её обхода при фаззинге

2. Реальная задача: фаззинг bitmessage
Особенности: написана на python...

3. Реальная задача: фаззинг cgit

Возможно в обучающих целях стоит добавить фаззинг какого-нибудь парсера, работающего с файлами изначально - его проще интегрировать... И в качестве реальной задачи возможно стоит взять что-то другое. Хотя фаззинг битмессаджа - это в целом полезная работа.

4. Попробовать KLEE

5. Попробовать QSym

